import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
import plotly.graph_objects as go
from PIL import Image

sns.set_theme(style="whitegrid")

# Carregar os dados diretamente da URL com ?raw=true
df = pd.read_csv('https://raw.githubusercontent.com/mavimelato/tcc_olist/master/data/df_preprocessed.csv')
order_items = pd.read_csv('https://raw.githubusercontent.com/mavimelato/tcc_olist/master/data/olist_order_items_dataset.csv')
orders = pd.read_csv('https://raw.githubusercontent.com/mavimelato/tcc_olist/master/data/olist_orders_dataset.csv')
payments = pd.read_csv('https://raw.githubusercontent.com/mavimelato/tcc_olist/master/data/olist_order_payments_dataset.csv')
products = pd.read_csv('https://raw.githubusercontent.com/mavimelato/tcc_olist/master/data/olist_products_dataset.csv')
customers = pd.read_csv('https://raw.githubusercontent.com/mavimelato/tcc_olist/master/data/olist_customers_dataset.csv')
sellers = pd.read_csv('https://raw.githubusercontent.com/mavimelato/tcc_olist/master/data/olist_sellers_dataset.csv')
product_category = pd.read_csv('https://raw.githubusercontent.com/mavimelato/tcc_olist/master/data/product_category_name_translation.csv')
geolocation = pd.read_csv('https://raw.githubusercontent.com/mavimelato/tcc_olist/master/data/olist_geolocation_dataset.csv')
reviews = pd.read_csv('https://raw.githubusercontent.com/mavimelato/tcc_olist/master/data/olist_order_reviews_dataset.csv')

st.title('üìä An√°lise Explorat√≥ria de Dados')
st.markdown("""
            A An√°lise Explorat√≥ria de Dados (EDA) tem como objetivo examinar e entender os dados de forma profunda, com a finalidade de identificar padr√µes, tend√™ncias e anomalias. No contexto de uma plataforma de e-commerce, buscamos compreender como os pedidos, clientes e produtos se comportam ao longo do tempo e em diferentes regi√µes. A an√°lise envolve a explora√ß√£o de m√∫ltiplas dimens√µes, incluindo temporalidade, localiza√ß√£o geogr√°fica, e o comportamento de compra dos clientes. 

            Al√©m disso, a EDA investigou vari√°veis cruciais que influenciam o sucesso de um e-commerce, como a rela√ß√£o entre pre√ßo e frete, o tempo de entrega e o feedback dos clientes, fornecendo uma vis√£o hol√≠stica sobre o desempenho da plataforma e as necessidades dos consumidores.            
            
            #### Navega√ß√£o 
            
            Nesta p√°gina de An√°lise Explorat√≥ria de Dados (EDA), voc√™ pode explorar diferentes √°reas de an√°lise de forma simples e interativa. A navega√ß√£o √© feita por meio de um select box, localizado no topo da p√°gina, onde voc√™ pode escolher entre os seguintes t√≥picos de an√°lise:
            
            - **Pedidos:** a an√°lise dos pedidos busca identificar padr√µes de compra, sazonalidade e o comportamento dos consumidores ao longo do tempo.
            - **Pre√ßos:** aqui, analisamos a varia√ß√£o de pre√ßos dos produtos e como esses pre√ßos afetam a demanda.
            - **Avalia√ß√µes:** a an√°lise de avalia√ß√µes dos clientes oferece insights sobre a satisfa√ß√£o e a qualidade dos produtos. Ela ajuda a identificar produtos bem avaliados e aqueles que necessitam de melhorias, influenciando as decis√µes de compra e a lealdade dos clientes.
            - **M√©tricas:** analisa m√©tricas-chave como receita mensal, clientes ativos, pedidos mensais e clientes recorrentes. Esses indicadores ajudam a monitorar o desempenho financeiro e a fideliza√ß√£o de clientes, al√©m de fornecer insights sobre a sa√∫de do neg√≥cio e a efic√°cia das estrat√©gias de marketing.
            """)

# Selecionar se√ß√£o da EDA
section = st.selectbox('Escolha uma se√ß√£o da EDA:', [
                       'Pedidos', 'Pre√ßos', 'Avalia√ß√µes', 'M√©tricas'])

if section == 'Pedidos':
    # Pergunta em Markdown
    st.markdown(
        "### 1. Como o n√∫mero de pedidos muda ao longo do tempo? Qual dia teve o maior n√∫mero de pedidos?")

    # Manipula√ß√£o de Dados - Criando um DataFrame agrupado
    df_aux = df[['day_month_year', 'order_id']].groupby(
        ['day_month_year']).count().reset_index()

    # Criando o gr√°fico interativo
    fig_11 = px.bar(df_aux, x='day_month_year', y='order_id')

    # Personalizando o gr√°fico usando Plotly
    fig_11.update_layout(
        title='N√∫mero de Pedidos por Dia',       # T√≠tulo do gr√°fico
        xaxis_title='Dia',                        # R√≥tulo do eixo X
        yaxis_title='N√∫mero de Pedidos',          # R√≥tulo do eixo Y
        title_x=0.3,                               # Centraliza o t√≠tulo do gr√°fico
        # Ajuste das margens (esquerda, direita, superior, inferior)
        margin=dict(l=50, r=50, t=50, b=50)
    )

    # Exibindo o gr√°fico interativo no Streamlit
    st.plotly_chart(fig_11)

    # Resposta em Markdown
    with st.expander("Detalhes da An√°lise"):
        st.markdown("""
                    Para analisar o comportamento do n√∫mero de pedidos ao longo do tempo, foi criada uma visualiza√ß√£o que mostra a quantidade de pedidos por dia. A an√°lise do n√∫mero de pedidos ao longo do tempo, ilustrada no gr√°fico acima, revelou um pico em 24 de novembro de 2017, data da Black Friday. 
                    
                    Esse aumento reflete o impacto significativo de datas promocionais no com√©rcio eletr√¥nico, destacando sua relev√¢ncia para o aumento de transa√ß√µes na plataforma.""")

    # Pergunta em Markdown
    st.markdown(
        "### 2. Qual √© a distribui√ß√£o do n√∫mero de pedidos por tipo de pagamento e qual m√©todo √© o mais utilizado?")

    # Manipula√ß√£o de Dados - Criando um DataFrame agrupado
    df_aux = df[['payment_type', 'order_id']].groupby(
        ['payment_type']).count().reset_index()
    df_aux.sort_values('order_id', ascending=False, inplace=True)

    # Criando o gr√°fico interativo
    fig_13 = px.bar(df_aux, x='payment_type', y='order_id',
                    text_auto=True, color='payment_type')

    # Personalizando o gr√°fico
    fig_13.update_layout(
        title='N√∫mero de Pedidos por Tipo de Pagamento',  # T√≠tulo do gr√°fico
        xaxis_title='Tipo de Pagamento',                  # R√≥tulo do eixo X
        yaxis_title='N√∫mero de Pedidos',                  # R√≥tulo do eixo Y
        title_x=0.5,                                     # Centraliza o t√≠tulo do gr√°fico
        # Inclina os r√≥tulos do eixo X para melhor leitura
        xaxis_tickangle=-45,
        # Margens personalizadas
        margin=dict(l=50, r=50, t=50, b=50)
    )

    # Exibindo o gr√°fico no Streamlit
    st.plotly_chart(fig_13)

    # Resposta em Markdown
    with st.expander("Detalhes da An√°lise"):
        st.markdown(""" O gr√°fico apresentado mostra a distribui√ß√£o do n√∫mero de pedidos por tipo de pagamento. A an√°lise revelou que o cart√£o de cr√©dito √© o m√©todo de pagamento mais utilizado, seguido pelo boleto, que representa cerca de 25% do volume de pagamentos feitos com cart√£o de cr√©dito. O vale e o cart√£o de d√©bito ocupam, respectivamente, a terceira e quarta posi√ß√µes no ranking de pagamentos """)

    # Pergunta em Markdown
    st.markdown("### 3. Como o n√∫mero de pedidos varia por regi√£o? Existe alguma regi√£o que tenha mais pedidos em um determinado per√≠odo?")

    # Manipula√ß√£o de Dados - Criando um DataFrame agrupado
    df_aux = df[['day_month_year', 'order_id', 'customer_region']].groupby(
        ['day_month_year', 'customer_region']).count().reset_index()

    # Selecionando dados de 2018
    df_aux = df_aux.loc[df_aux['day_month_year'] >= '2018-01-01']

    # Criando o gr√°fico interativo de linha
    fig_12 = px.line(df_aux, x='day_month_year', y='order_id',
                     color='customer_region', title='N√∫mero de Pedidos por Regi√£o')

    # Personalizando o gr√°fico usando Plotly
    fig_12.update_layout(
        xaxis_title='Dia',                         # R√≥tulo do eixo X
        yaxis_title='N√∫mero de Pedidos',           # R√≥tulo do eixo Y
        title_x=0.3,                               # Centraliza o t√≠tulo do gr√°fico
        # Ajuste das margens (esquerda, direita, superior, inferior)
        margin=dict(l=50, r=50, t=50, b=50)
    )

    # Exibindo o gr√°fico interativo no Streamlit
    st.plotly_chart(fig_12, use_container_width=True)

    # Resposta em Markdown
    with st.expander("Detalhes da An√°lise"):
        st.markdown("""
                    Foi gerada uma visualiza√ß√£o para analisar a varia√ß√£o do n√∫mero de pedidos por regi√£o ao longo do tempo, destacando a quantidade de pedidos por dia em diferentes regi√µes. 
                    
                    A an√°lise dos dados de 2018 revelou que a regi√£o Sudeste se manteve como a l√≠der em n√∫mero de pedidos durante todo o ano, com uma propor√ß√£o consistente em rela√ß√£o √†s demais regi√µes. Apesar da varia√ß√£o no volume total de pedidos ao longo do tempo, a propor√ß√£o entre as regi√µes permaneceu praticamente inalterada.
                    
                    Esse comportamento sugere uma estabilidade nas prefer√™ncias regionais, com a regi√£o Sudeste liderando, mas sem grandes flutua√ß√µes ao longo do ano.""")

    # Pergunta 5: Como √© a distribui√ß√£o semanal dos pedidos n√£o entregues?
    st.markdown(
        "### 4. Como √© a distribui√ß√£o semanal dos pedidos n√£o entregues?")

    # Manipula√ß√£o de Dados - Criando um DataFrame agrupado
    df_aux = df.loc[(df['day_month_year'] >= '2018-01-01') &
                    (df['order_status'] != 'delivered'), :]
    df_aux = df_aux[['weekofyear', 'order_id', 'order_status']].groupby(
        ['weekofyear', 'order_status']).count().reset_index()

    # Criando o gr√°fico interativo
    fig_14 = px.bar(df_aux, x='weekofyear', y='order_id', color='order_status',
                    title='N√∫mero de Pedidos N√£o Entregues por Semana (2018)',
                    labels={'weekofyear': 'Semana', 'order_id': 'N√∫mero de Pedidos'})

    fig_14.update_layout(
        title='N√∫mero de Pedidos N√£o Entregues por Semana (2018)',
        xaxis_title='Semana',
        yaxis_title='N√∫mero de Pedidos',
        title_x=0.3,
        margin=dict(l=50, r=50, t=50, b=50)
    )

    # Exibindo o gr√°fico
    st.plotly_chart(fig_14)

    # Resultado observado no gr√°fico
    with st.expander("Detalhes da An√°lise"):
        st.markdown("""
    A an√°lise da distribui√ß√£o semanal dos pedidos n√£o entregues em 2018 revela padr√µes interessantes. Observa-se um pico no n√∫mero de pedidos cancelados entre as semanas 4 e 9, seguido por outro aumento em torno da 30¬™ semana. 
    
    Esses picos podem indicar sazonalidade ou fatores espec√≠ficos que influenciam o comportamento dos pedidos ao longo do ano. 
    
    ### Recomenda√ß√£o 
    - Investigar se esses padr√µes se repetem em outros anos
    - Identificar causas subjacentes e propor estrat√©gias para diminuir esses eventos.
    """)

    # Pergunta 6: Isso √© um padr√£o anual?
    st.markdown("#### 4.1 Isso √© um padr√£o anual?")

    # Manipula√ß√£o de Dados - Criando um DataFrame agrupado para 2017
    df_aux = df.loc[(df['day_month_year'] >= '2017-01-01') & (df['day_month_year']
                                                              <= '2017-12-31') & (df['order_status'] != 'delivered'), :]
    df_aux = df_aux[['weekofyear', 'order_id', 'order_status']].groupby(
        ['weekofyear', 'order_status']).count().reset_index()

    # Criando o gr√°fico interativo
    fig_141 = px.bar(df_aux, x='weekofyear', y='order_id', color='order_status',
                     title='N√∫mero de Pedidos N√£o Entregues por Semana (2017)',
                     labels={'weekofyear': 'Semana', 'order_id': 'N√∫mero de Pedidos'})

    fig_141.update_layout(
        title='N√∫mero de Pedidos N√£o Entregues por Semana (2017)',
        xaxis_title='Semana',
        yaxis_title='N√∫mero de Pedidos',
        title_x=0.3,
        margin=dict(l=50, r=50, t=50, b=50)
    )

    # Exibindo o gr√°fico
    st.plotly_chart(fig_141)

    # Resultado observado no gr√°fico
    with st.expander("Detalhes da An√°lise"):
        st.markdown("""
    A an√°lise dos dados de 2017 n√£o revela um padr√£o anual semelhante ao observado em 2018. Contudo, destaca-se que, assim como em 2018, o n√∫mero de pedidos cancelados √© maior entre as semanas 30 e 33.
    """)

    # Pergunta 7: N√∫meros de pedidos por categoria
    st.markdown(
        "### 5. Quais categorias de produtos t√™m o maior volume de vendas?")

    # Manipula√ß√£o de Dados - Agrupando por categoria
    df_aux1 = df[['product_category_name', 'order_id']].groupby(
        ['product_category_name']).count().reset_index()
    df_aux1 = df_aux1.sort_values('order_id', ascending=False).head(20)

    # Criando o gr√°fico interativo
    fig_21 = px.bar(df_aux1, x='product_category_name',
                    y='order_id', text_auto=True)
    fig_21.update_layout(
        title='N√∫mero de Pedidos por Categoria',
        xaxis_title='Categoria',
        yaxis_title='N√∫mero de Pedidos',
        margin=dict(l=50, r=50, t=50, b=50)
    )

    # Exibindo o gr√°fico
    st.plotly_chart(fig_21)

    # Resultado observado no gr√°fico
    with st.expander("Detalhes da An√°lise"):
        st.markdown("""
    A an√°lise dos n√∫meros de pedidos por categoria revela que as categorias com maior volume de vendas incluem cama, mesa e banho, beleza e sa√∫de, esporte e lazer, m√≥veis de decora√ß√£o e inform√°tica e acess√≥rios. Por outro lado, categorias como seguros e servi√ßos e CDs e DVDs musicais apresentam um desempenho abaixo do esperado.
    
    ### Recomenda√ß√£o 
    - Reavaliar a estrat√©gia em rela√ß√£o a esses produtos, uma vez que o mercado digital tem se distanciado dessas √°reas.
    """)

    # Pergunta 5: Os clientes compram mais no come√ßo do m√™s?
    st.markdown(
        "### 6. Os clientes tendem a fazer mais compras no in√≠cio ou no final do m√™s?")

    # Manipula√ß√£o de Dados
    df_aux = df[['order_id', 'day']].groupby(['day']).count().reset_index()
    df_aux.sort_values('order_id', ascending=False, inplace=True)

    # Criando o gr√°fico
    fig_17 = px.bar(df_aux, x='day', y='order_id', text_auto=True,
                    title='N√∫mero de Pedidos por Dia do M√™s',
                    labels={'day': 'Dia', 'order_id': 'N√∫mero de Pedidos'},
                    color='order_id', color_continuous_scale='magma')

    # Personalizando o gr√°fico
    fig_17.update_layout(
        title_x=0.3,
        xaxis_title='Dia do M√™s',
        yaxis_title='N√∫mero de Pedidos',
        xaxis=dict(tickmode='linear'),
        yaxis=dict(title='N√∫mero de Pedidos'),
        xaxis_tickangle=-45,
        margin=dict(l=20, r=20, t=50, b=50)
    )

    # Exibindo o gr√°fico no Streamlit
    st.plotly_chart(fig_17)

    # Resultados do gr√°fico
    with st.expander("Detalhes da An√°lise"):
        st.markdown("""
                O gr√°fico mostra que n√£o h√° um padr√£o claro de compras mais frequentes no in√≠cio do m√™s, mas √© poss√≠vel notar uma queda significativa no n√∫mero de pedidos a partir do 28¬∫ dia.
                
                Esse comportamento pode indicar que os consumidores reduzem suas compras conforme o m√™s avan√ßa, talvez devido ao esgotamento do or√ßamento ou outras prioridades. 
                
                ### Recomenda√ß√£o 
                - Ajustar as estrat√©gias de vendas, oferecendo promo√ß√µes no final do m√™s, visando impulsionar as compras nesse per√≠odo.
                """)

    # Pergunta 6: N√∫mero de Pedidos por Dia da Semana
    st.markdown("### 7. Qual dia da semana tem o maior n√∫mero de pedidos?")

    # Manipula√ß√£o dos dados
    df_aux1 = df[['order_id', 'name_dayofweek']].groupby(
        ['name_dayofweek']).count().reset_index()
    df_aux1.sort_values('order_id', ascending=False, inplace=True)

    # Criando o gr√°fico
    fig_18 = px.bar(df_aux1, x='name_dayofweek', y='order_id', text_auto=True, color='name_dayofweek',
                    labels={'name_dayofweek': 'Dia da Semana', 'order_id': 'N√∫mero de Pedidos'})

    # Personalizando o gr√°fico
    fig_18.update_layout(
        title='N√∫mero de Pedidos por Dia da Semana',
        xaxis_title='Dia da Semana',
        yaxis_title='N√∫mero de Pedidos',
        margin=dict(l=50, r=50, t=50, b=50)
    )

    # Exibindo o gr√°fico no Streamlit
    st.plotly_chart(fig_18)

    # Pergunta 7: Valor M√©dio de Pagamento por Dia da Semana
    st.markdown("### 8. Em qual dia da semana os consumidores gastam mais?")

    # Manipula√ß√£o dos dados
    df_aux2 = df[['payment_value', 'name_dayofweek']].groupby(
        ['name_dayofweek']).mean().reset_index()
    df_aux2.sort_values('payment_value', ascending=False, inplace=True)

    # Criando o gr√°fico
    fig_19 = px.bar(df_aux2, x='name_dayofweek', y='payment_value', text_auto=True, color='name_dayofweek',
                    labels={'name_dayofweek': 'Dia da Semana', 'payment_value': 'Valor M√©dio do Pagamento'})

    # Personalizando o gr√°fico
    fig_19.update_layout(
        title='Valor M√©dio de Pagamento por Dia da Semana',
        xaxis_title='Dia da Semana',
        yaxis_title='Valor M√©dio do Pagamento',
        margin=dict(l=50, r=50, t=50, b=50)
    )

    # Exibindo o gr√°fico no Streamlit
    st.plotly_chart(fig_19)

    # Resultados do gr√°fico
    with st.expander("Detalhes da An√°lise"):
        st.markdown("""
                    A an√°lise dos gr√°ficos mostra que a segunda-feira tem o maior n√∫mero de pedidos, o que pode ser aproveitado com promo√ß√µes nesse dia. J√° a sexta-feira, embora com menos pedidos, apresenta o maior valor m√©dio de pagamento, indicando que os consumidores gastam mais pr√≥ximo ao fim da semana.
                    
                    ### Recomenda√ß√£o 
                    - Explorar ofertas e descontos direcionados para aumentar o ticket m√©dio nas sextas-feiras. 
                    -  O fim de semana, com menor volume de pedidos e valores, pode ser uma oportunidade para otimizar campanhas e engajar mais consumidores.
                    """)

    # Pergunta 8: Quais s√£o as 5 cidades com mais pedidos?
    st.markdown(
        "### 9. Quais s√£o as cinco cidades com o maior n√∫mero de pedidos?")

    # Manipula√ß√£o dos dados de geolocaliza√ß√£o (assumindo que voc√™ tem as tabelas de geolocaliza√ß√£o e clientes)
    # Cria dados de ponto representativo a partir do c√≥digo postal dos dados geogr√°ficos
    geo_data = pd.DataFrame(dict(rep_lat=geolocation.groupby("geolocation_zip_code_prefix").geolocation_lat.mean(),
                                 rep_long=geolocation.groupby("geolocation_zip_code_prefix").geolocation_lng.mean())).reset_index()

    # Mesclar os dados de geolocaliza√ß√£o nos dados de clientes
    geo_customers = customers.merge(
        geo_data, left_on="customer_zip_code_prefix", right_on="geolocation_zip_code_prefix")

    # Focar em customer_unique_id porque customer_id √© distribu√≠do por pedido
    grouped_geo_customers = geo_customers.groupby("customer_unique_id")[
        ["rep_lat", "rep_long"]].mean().reset_index()

    # Ajuste conforme sua necessidade
    top_5_cities = df['customer_city'].value_counts().head(5).reset_index()
    top_5_cities.columns = ['Cidade', 'N√∫mero de Pedidos']

    # Criando o gr√°fico
    fig_52 = px.bar(top_5_cities, x='Cidade', y='N√∫mero de Pedidos',
                    title='Top 5 Cidades com Mais Pedidos',
                    labels={'Cidade': 'Cidade',
                            'N√∫mero de Pedidos': 'N√∫mero de Pedidos'},
                    color='Cidade')

    # Atualizando layout
    fig_52.update_layout(
        xaxis_title='Cidade',
        yaxis_title='N√∫mero de Pedidos',
        width=800,
        height=400,
        margin=dict(l=50, r=50, t=50, b=50)
    )

    # Exibindo o gr√°fico no Streamlit
    st.plotly_chart(fig_52)

    # Resultados do gr√°fico
    with st.expander("Detalhes da An√°lise"):
        st.markdown("""
                    As cinco cidades com o maior n√∫mero de pedidos s√£o, respectivamente, S√£o Paulo, Rio de Janeiro, Belo Horizonte, Bras√≠lia e Curitiba. Esse padr√£o reflete a forte concentra√ß√£o de consumo nas capitais e grandes centros urbanos.
                    
                    ### Recomenda√ß√£o 
                    - Focar esfor√ßos log√≠sticos e de marketing nessas cidades para atender √† alta demanda com efici√™ncia.""")

    # Pergunta 4: N√∫mero de Pedidos por Estado
    st.markdown("### 10. Quais estados t√™m o maior volume de pedidos?")

    # Manipula√ß√£o de Dados
    df_aux = df[['customer_state', 'order_id']].groupby(
        ['customer_state']).count().reset_index()
    df_aux.sort_values('order_id', ascending=False, inplace=True)

    # Criando o gr√°fico
    fig_16 = px.bar(df_aux, x='customer_state', y='order_id', text='order_id',
                    title='N√∫mero de Pedidos por Estado',
                    labels={'customer_state': 'Estado', 'order_id': 'N√∫mero de Pedidos'})

    # Personalizando o gr√°fico
    fig_16.update_layout(
        title='N√∫mero de Pedidos por Estado',
        xaxis_title='Estado',
        yaxis_title='N√∫mero de Pedidos',
        height=600,
        width=1000,
        xaxis_title_font_size=14,
        yaxis_title_font_size=14,
        title_x=0.3,
        xaxis_tickangle=-45,
        margin=dict(l=50, r=50, t=50, b=50)
    )

    # Exibindo o gr√°fico no Streamlit
    st.plotly_chart(fig_16)

    # Resultados do gr√°fico
    with st.expander("Detalhes da An√°lise"):
        st.markdown("""
                    A an√°lise do gr√°fico mostra que S√£o Paulo lidera em n√∫mero de pedidos, seguido por Rio de Janeiro e Minas Gerais, ambos da Regi√£o Sudeste, um importante polo de consumo e log√≠stica. 
                    
                    J√° os estados do Norte t√™m volumes bem menores, sugerindo desafios log√≠sticos ou um alcance limitado do e-commerce na regi√£o. 
                    
                    ### Recomenda√ß√£o 
                    - Ajustar as estrat√©gias para melhorar a presen√ßa e a log√≠stica no Norte.""")

elif section == 'Pre√ßos':
    # Pergunta em Markdown
    st.markdown(
        "### 1. Como √© a distribui√ß√£o dos pre√ßos nas 10 categorias de produtos mais vendidas?")

    # Manipula√ß√£o de Dados - Agrupando por categoria de produto
    df_aux1 = df[['product_category_name', 'order_id']].groupby(
        ['product_category_name']).count().reset_index()
    df_aux1.sort_values('order_id', ascending=False, inplace=True)

    # Selecionando as 10 categorias mais vendidas
    most_sold_categories = df_aux1.product_category_name.head(10).tolist()
    df_aux2 = df[df['product_category_name'].isin(most_sold_categories)]

    # Criando o gr√°fico de caixa (box plot) com uma paleta de cores categ√≥rica
    fig_31 = px.box(df_aux2, x='product_category_name', y='price',
                    title='Distribui√ß√£o de Pre√ßos nas 10 Categorias Mais Vendidas',
                    labels={'product_category_name': 'Categoria',
                            'price': 'Pre√ßo'},
                    color='product_category_name',
                    color_discrete_sequence=px.colors.qualitative.Plotly)

    # Personalizando o layout do gr√°fico
    fig_31.update_layout(
        title_x=0.3,                   # Centraliza o t√≠tulo
        xaxis_title='Categoria',       # R√≥tulo do eixo X
        yaxis_title='Pre√ßo',           # R√≥tulo do eixo Y
        xaxis_showgrid=False,          # Remove a grade do eixo X
        yaxis=dict(title='Pre√ßo'),     # Define o t√≠tulo do eixo Y
        xaxis_tickangle=-45,           # Inclina os r√≥tulos do eixo X para melhor legibilidade
        # height=600,                    # Aumenta a altura do gr√°fico
        # Ajusta as margens para dar mais espa√ßo aos r√≥tulos
        margin=dict(l=40, r=40, t=80, b=150),
        xaxis_tickfont_size=10         # Diminui o tamanho da fonte dos r√≥tulos do eixo X
    )

    # Exibindo o gr√°fico interativo
    st.plotly_chart(fig_31)

    # Resposta em Markdown
    with st.expander("Detalhes da An√°lise"):
        st.markdown("""
    A an√°lise das 10 categorias mais vendidas revelou que algumas categorias, como "rel√≥gios_presentes", possuem pre√ßos mais altos, indicando um potencial para estrat√©gias focadas em produtos premium. Por outro lado, "telefonia" e "utilidades_domesticas" apresentam pre√ßos m√©dios baixos e alta demanda, tornando-se atrativas para consumidores sens√≠veis ao pre√ßo. Al√©m disso, categorias como "beleza_saude" e "cama_mesa_banho" mostram uma diversidade de pre√ßos, o que sugere a possibilidade de segmenta√ß√£o de mercado.

    ### Recomenda√ß√£o 
    - Focar em estrat√©gias premium para categorias como "rel√≥gios_presentes", destacando o valor agregado e a exclusividade dos produtos.
    - Atra√ß√£o de consumidores sens√≠veis ao pre√ßo com promo√ß√µes e descontos em categorias como "telefonia" e "utilidades_domesticas", para aproveitar a alta demanda.
    - Segmenta√ß√£o de mercado nas categorias "beleza_saude" e "cama_mesa_banho", criando campanhas personalizadas para diferentes perfis de clientes, aproveitando a diversidade de pre√ßos.
    """)

    # Manipula√ß√£o de Dados - Agrupando por categoria de produto e aplicando filtro de pre√ßo
    df_aux2 = df[(df['product_category_name'].isin(
        most_sold_categories)) & (df['price'] <= 1000)]

    # Criando o gr√°fico de caixa (box plot)
    fig_32 = px.box(df_aux2, x='product_category_name', y='price',
                    title='Distribui√ß√£o de Pre√ßos nas 10 Categorias Mais Vendidas (Abaixo de R$1.000)',
                    labels={'product_category_name': 'Categoria',
                            'price': 'Pre√ßo'},
                    color='product_category_name',
                    color_discrete_sequence=px.colors.qualitative.Plotly)

    # Personalizando o layout do gr√°fico
    fig_32.update_layout(
        title_x=0.3,                   # Centraliza o t√≠tulo
        xaxis_title='Categoria',       # R√≥tulo do eixo X
        yaxis_title='Pre√ßo',           # R√≥tulo do eixo Y
        xaxis_showgrid=False,          # Remove a grade do eixo X
        xaxis_tickangle=-45         # Inclina os r√≥tulos do eixo X para melhor legibilidade
        # height=650                     # Define a altura do gr√°fico
    )

    # Exibindo o gr√°fico interativo
    st.plotly_chart(fig_32)

    # Resposta em Markdown
    with st.expander("Detalhes da An√°lise"):
        st.markdown("""
        Ao filtrar produtos abaixo de R$1.000 nas 10 categorias mais vendidas revela pre√ßos m√©dios acess√≠veis, indicando oportunidades para ampliar a oferta nessa faixa, atrair mais consumidores e aumentar o volume de vendas.
    """)

    # Pergunta em Markdown
    st.markdown(
        "### 2. Como varia o pre√ßo m√©dio dos produtos entre os diferentes estados e regi√µes do Brasil?")

    # Manipula√ß√£o de Dados - Criando o dataframe agrupado
    df_aux = df[['customer_state', 'price', 'customer_region']].groupby(
        ['customer_state', 'customer_region']).mean().reset_index()
    df_aux.sort_values('price', ascending=False, inplace=True)

    # Criando o gr√°fico de barras
    fig_33 = px.bar(df_aux, x='customer_state', y='price', color='customer_region', text_auto=True,
                    title='Pre√ßo M√©dio dos Produtos por Estado e Regi√£o',
                    labels={'customer_state': 'Estado', 'price': 'Pre√ßo M√©dio', 'customer_region': 'Regi√£o'})

    # Personalizando o layout do gr√°fico
    fig_33.update_layout(
        title_x=0.5,                   # Centraliza o t√≠tulo
        xaxis_title='Estado',          # R√≥tulo do eixo X
        yaxis_title='Pre√ßo M√©dio',     # R√≥tulo do eixo Y
        xaxis_showgrid=False,          # Remove a grade do eixo X
        yaxis=dict(title='Pre√ßo M√©dio'),  # Define o t√≠tulo do eixo Y
    )

    # Exibindo o gr√°fico no Streamlit
    st.plotly_chart(fig_33, use_container_width=True)

    # Resposta em Markdown
    with st.expander("Detalhes da An√°lise"):
        st.markdown("""
        Os resultados apresentados indicam varia√ß√µes significativas no pre√ßo m√©dio dos produtos entre os estados e regi√µes do Brasil. Estados da regi√£o Norte e Nordeste, como PB, AC e AL, apresentam pre√ßos mais altos, enquanto as regi√µes Sul e Sudeste registram valores mais baixos, com destaque para SP. 
        
        ### Recomenda√ß√£o
        - Explorar estrat√©gias de pre√ßo diferenciadas, levando em considera√ß√£o as particularidades regionais, como custos de distribui√ß√£o e perfil de consumo.
    """)

    # Pergunta em Markdown
    st.markdown(
        "### 3. Qual √© a diferen√ßa no pre√ßo m√©dio do frete entre os estados e como isso varia por regi√£o?")

    # Manipula√ß√£o de Dados - Criando o dataframe agrupado
    df_aux = df[['customer_state', 'freight_value', 'customer_region']].groupby(
        ['customer_state', 'customer_region']).mean().reset_index()
    df_aux.sort_values('freight_value', ascending=False, inplace=True)

    # Criando o gr√°fico de barras
    fig_34 = px.bar(
        df_aux,
        x='customer_state',
        y='freight_value',
        color='customer_region',
        text_auto=True,
        title='Pre√ßo M√©dio do Frete por Estado e Regi√£o',
        labels={'customer_state': 'Estado',
                'freight_value': 'Pre√ßo M√©dio do Frete', 'customer_region': 'Regi√£o'}
    )

    # Personalizando o layout do gr√°fico
    fig_34.update_layout(
        title_x=0.3,                   # Centraliza o t√≠tulo
        xaxis_title='Estado',          # R√≥tulo do eixo X
        yaxis_title='Pre√ßo M√©dio do Frete',  # R√≥tulo do eixo Y
        xaxis_showgrid=False,          # Remove a grade do eixo X
        # Define o t√≠tulo do eixo Y
        yaxis=dict(title='Pre√ßo M√©dio do Frete')
    )

    # Exibindo o gr√°fico no Streamlit
    st.plotly_chart(fig_34)

    # Texto explicativo no Streamlit
    with st.expander("Detalhes da An√°lise"):
        st.markdown("""
        Os resultados apresentados no gr√°fico indicam que os clientes da Regi√£o Norte e Nordeste enfrentam custos elevados de frete, al√©m de pre√ßos m√©dios mais altos para os produtos, como observado na an√°lise anterior. 
        
        ### Recomenda√ß√£o
        - Revisar as estrat√©gias log√≠sticas para essa regi√£o, como buscar alternativas de transporte mais econ√¥micas ou oferecer promo√ß√µes para compensar os custos elevados.
        - Avaliar a possibilidade de precifica√ß√£o diferenciada e segmenta√ß√£o de produtos, ajustando a oferta para tornar as compras mais acess√≠veis nesse mercado.
        """)

elif section == 'Avalia√ß√µes':
    # Pergunta
    st.markdown(
        "#### 1. Quais categorias de produtos apresentam as melhores e piores avalia√ß√µes?")

    # Criando o dataframe com as m√©dias de avalia√ß√£o por categoria
    category_reviews = df.groupby('product_category_name')[
        'review_score'].mean().reset_index()

    # Ordenando os resultados pela m√©dia das avalia√ß√µes
    category_reviews = category_reviews.sort_values(
        by='review_score', ascending=False)

    # Criando o gr√°fico de barras no Streamlit
    fig, ax = plt.subplots(figsize=(12, 14))  # Aumentando o tamanho da figura
    sns.barplot(x='review_score', y='product_category_name',
                data=category_reviews, palette='magma', ax=ax)
    ax.set_title('M√©dia de Avalia√ß√µes por Categoria de Produto', fontsize=16)
    ax.set_xlabel('M√©dia da Avalia√ß√£o', fontsize=14)
    ax.set_ylabel('Categoria de Produto', fontsize=14)

    # Ajustando os r√≥tulos do eixo Y
    ax.tick_params(axis='y', labelsize=10)  # Reduzindo o tamanho dos r√≥tulos
    plt.tight_layout()  # Garantindo que os r√≥tulos n√£o sejam cortados

    # Exibindo o gr√°fico no Streamlit
    st.pyplot(fig)

    with st.expander("Detalhes da An√°lise"):
        st.markdown(""" 
                    Os resultados apresentados no gr√°fico indicam que as categorias **CDs e DVDs** e **roupa infanto juvenil** possuem as m√©dias de avalia√ß√£o mais altas, enquanto **seguros** apresenta uma das m√©dias mais baixas. Essa categoria tamb√©m foi identificada em uma an√°lise anterior como a que tem o menor n√∫mero de pedidos. Isso sugere que tanto a avalia√ß√£o negativa quanto a baixa demanda podem estar relacionadas a problemas espec√≠ficos nessa √°rea. 
                    
                    ### Recomenda√ß√£o
                    - Investigar as causas dessas avalia√ß√µes baixas e o baixo volume de vendas, buscando: **otimizar a experi√™ncia do cliente**, **melhorar o atendimento** e **ajustar a oferta de produtos**. 
                    - Implementar estrat√©gias de marketing voltadas para aumentar a visibilidade e a confian√ßa nessa categoria podem contribuir para melhorar tanto as avalia√ß√µes quanto o n√∫mero de pedidos.""")

    # Pergunta
    st.markdown(
        "#### 2. Como a pontua√ß√£o m√©dia da avalia√ß√£o dos produtos se relaciona com o tempo de entrega em diferentes regi√µes?")

    # Manipula√ß√£o de Dados
    df_aux = df[['review_score', 'payment_value', 'customer_state', 'customer_region',
                 'delivery_time_in_hours']].groupby(['customer_state', 'customer_region']).mean().reset_index()

    # Criando o gr√°fico
    fig_44 = px.scatter(
        df_aux,
        x='delivery_time_in_hours',
        y='review_score',
        color='customer_region',
        size='payment_value',
        trendline='ols',
        trendline_scope='overall',
        trendline_color_override='white',
        title='Pontua√ß√£o M√©dia da Avalia√ß√£o vs. Delta de Tempo (Regi√µes)',
        labels={
            'delivery_time_in_hours': 'Tempo de entrega (horas)',
            'review_score': 'Pontua√ß√£o da Avalia√ß√£o'
        }
    )

    # Customizando o layout do gr√°fico
    fig_44.update_layout(
        title='Pontua√ß√£o M√©dia da Avalia√ß√£o vs. Tempo de entrega (Regi√µes)',
        xaxis_title='Tempo de entrega (horas)',
        yaxis_title='Pontua√ß√£o da Avalia√ß√£o',
        # height=650
    )

    # Exibindo o gr√°fico no Streamlit
    st.plotly_chart(fig_44, use_container_width=True)

    # Selecionando apenas as colunas num√©ricas
    df_numerico = df.select_dtypes(include=['number'])

    # Calculando a matriz de correla√ß√£o
    correlation_matrix = df_numerico.corr()

    # Criando o mapa de calor
    fig, ax = plt.subplots(figsize=(12, 8))
    sns.heatmap(correlation_matrix, annot=True, cmap='RdBu',
                fmt='.2f', linewidths=0.5, ax=ax)
    ax.set_title('Matriz de Correla√ß√£o')

    # Exibindo o mapa de calor no Streamlit
    st.pyplot(fig)

    with st.expander("Detalhes da An√°lise"):
        st.markdown("""
    A pontua√ß√£o de avalia√ß√£o dos produtos est√° fortemente relacionada ao tempo de entrega. Entregas r√°pidas geralmente resultam em avalia√ß√µes mais positivas, enquanto entregas demoradas impactam negativamente as avalia√ß√µes. Regi√µes com infraestrutura log√≠stica melhor tendem a ter tempos de entrega mais r√°pidos e, consequentemente, avalia√ß√µes mais altas, enquanto √°reas com desafios log√≠sticos enfrentam pontua√ß√µes mais baixas.

    ### Recomenda√ß√£o
    - Investir em infraestrutura log√≠stica nas regi√µes com tempos de entrega mais longos.
    - Melhorar a efici√™ncia no transporte por meio de parcerias com transportadoras locais ou otimiza√ß√£o de rotas de entrega.
    - Desenvolver uma comunica√ß√£o mais transparente com os clientes sobre o status da entrega, para melhorar a experi√™ncia geral, mesmo em √°reas de entrega mais demorada.

    """)

    # Pergunta
    st.markdown(
        "#### 3. Qual √© a rela√ß√£o entre a pontua√ß√£o m√©dia de avalia√ß√£o dos clientes e o tempo de entrega dos produtos em diferentes estados?")

    # Manipula√ß√£o de Dados - Criando o DataFrame agrupado
    df_aux = df[['review_score', 'payment_value', 'customer_state',
                 'delivery_time_in_hours']].groupby(['customer_state']).mean().reset_index()

    # Criando o gr√°fico
    fig_45 = px.scatter(df_aux, x='delivery_time_in_hours', y='review_score', color='customer_state', size='payment_value',
                        trendline='ols', trendline_scope='overall', trendline_color_override='white',
                        title='Pontua√ß√£o M√©dia da Avalia√ß√£o vs. Delta de Tempo (Estados)',
                        labels={'delivery_time_in_hours': 'Tempo de entrega (horas)', 'review_score': 'Pontua√ß√£o da Avalia√ß√£o'})

    # Customizando o gr√°fico
    fig_45.update_layout(
        title='Pontua√ß√£o M√©dia da Avalia√ß√£o vs. Tempo de entrega (Estados)',
        xaxis_title='Tempo de entrega (horas)',
        yaxis_title='Pontua√ß√£o da Avalia√ß√£o',
        height=650
    )

    # Mostrando o gr√°fico no Streamlit
    st.plotly_chart(fig_45)

    with st.expander("Detalhes da An√°lise"):
        st.markdown("""
    Os dados mostram que **estados com tempos de entrega mais r√°pidos**, como **SP** e **PR**, tendem a ter pontua√ß√µes de avalia√ß√£o mais altas, enquanto estados com entregas mais lentas, como **RR** e **AM**, apresentam pontua√ß√µes mais baixas. 
    
    #### Recomenda√ß√£o:
    - Para melhorar a satisfa√ß√£o do cliente, a empresa pode focar em otimizar a log√≠stica nos estados com tempos de entrega mais longo
    - Investir em solu√ß√µes de transporte mais eficientes, parcerias com transportadoras locais ou at√© mesmo reavaliar a distribui√ß√£o de estoque nessas regi√µes pode resultar em uma melhoria significativa nas avalia√ß√µes.
    """)

    # Pergunta
    st.markdown(
        "#### 3. Qual √© a distribui√ß√£o das avalia√ß√µes dos clientes do e-commerce?")

    print("review_score == 5: %d" % len(df[df['review_score'] == 5]))
    print("review_score == 4: %d" % len(df[df['review_score'] == 4]))
    print("review_score == 3: %d" % len(df[df['review_score'] == 3]))
    print("review_score == 2: %d" % len(df[df['review_score'] == 2]))
    print("review_score == 1: %d" % len(df[df['review_score'] == 1]))
    score_list = [len(df[df['review_score'] == 1]),
                  len(df[df['review_score'] == 2]),
                  len(df[df['review_score'] == 3]),
                  len(df[df['review_score'] == 4]),
                  len(df[df['review_score'] == 5])]

    # Definindo as cores
    colors = ['#001C5B', '#E64E36', '#ff82cd', '#0A4EE4', '#779E3D']

    # Criando o gr√°fico de barras no Plotly
    fig_47 = go.Figure(data=[go.Bar(
        x=[1, 2, 3, 4, 5],
        y=score_list,
        marker_color=colors,
        text=score_list,  # Adiciona os r√≥tulos com os valores de quantidade
        textposition='inside',  # Coloca os r√≥tulos dentro das barras
    )])

    # Configura√ß√µes do gr√°fico
    fig_47.update_layout(
        title="Distribui√ß√£o das Avalia√ß√µes dos Clientes",
        xaxis_title="Pontua√ß√£o da Avalia√ß√£o",
        yaxis_title="Quantidade",
        width=1100,
        height=600
    )

    # Exibindo o gr√°fico no Streamlit
    st.plotly_chart(fig_47)

    # Texto explicativo usando st.expander
    with st.expander("Detalhes da An√°lise"):
        st.markdown("""
        A **maioria das avalia√ß√µes** √© positiva, com  56.55% com nota 5 e 19% com nota 4. Isso indica uma experi√™ncia **geralmente satisfat√≥ria** para os clientes do e-commerce.

        Contudo, tamb√©m existem **√°reas de melhoria**, com 12.58% de nota 1 e  3.48% de nota 2.
        Essas notas mais baixas sugerem que, embora a experi√™ncia de compra seja amplamente positiva, h√° um segmento de clientes que est√° insatisfeito com aspectos espec√≠ficos do servi√ßo.

        #### Recomenda√ß√£o:
        - A empresa pode se concentrar em **identificar os pontos cr√≠ticos** que geram insatisfa√ß√£o (como atrasos ou problemas no atendimento) e implementar **a√ß√µes corretivas**.
        - Melhorias nas √°reas mais criticadas podem **aumentar ainda mais a satisfa√ß√£o** e ajudar a transformar avalia√ß√µes negativas em positivas.
        """)

elif section == 'M√©tricas':
    # Pergunta
    st.markdown(
        "#### 1. Receita Recorrente Mensal (MRR)")

    col = ['customer_unique_id', 'price',
           'order_item_id', 'order_purchase_timestamp']
    orders = df[col]

    orders['order_purchase_timestamp'] = pd.to_datetime(
        orders['order_purchase_timestamp'])

    orders['InvoiceYearMonth'] = orders['order_purchase_timestamp'].map(
        lambda date: 100*date.year + date.month)

    orders['Revenue'] = orders['price'] * orders['order_item_id']
    orders_revenue = orders.groupby(['InvoiceYearMonth'])[
        'Revenue'].sum().reset_index()

    # Dados do gr√°fico
    plot_data = [
        go.Scatter(
            x=orders_revenue['InvoiceYearMonth'],  # Eixo X: M√™s e Ano
            y=orders_revenue['Revenue'],  # Eixo Y: Receita
            mode='lines+markers',  # Exibe tanto as linhas quanto os marcadores
            marker=dict(color='blue'),  # Define a cor dos marcadores
            line=dict(color='blue')  # Define a cor da linha
        )
    ]

    # Layout do gr√°fico
    plot_layout = go.Layout(
        xaxis={"type": "category"},
        title='Receita Mensal',
        width=900,
        height=500
    )

    # Criando a figura
    fig_401 = go.Figure(data=plot_data, layout=plot_layout)

    # Exibindo no Streamlit
    st.plotly_chart(fig_401, use_container_width=True)

    # Texto explicativo usando st.expander
    with st.expander("Detalhes da An√°lise"):
        st.markdown("""
        A receita mensal do e-commerce cresceu de forma cont√≠nua at√© agosto de 2018, com destaque para o per√≠odo a partir de mar√ßo de 2017, quando superou R$ 400 mil mensais, alcan√ßando mais de R$ 1 milh√£o por m√™s. O pico foi em novembro de 2017, possivelmente impulsionado pela Black Friday, o que representou o maior volume de vendas do ano. 

        Em 2018, a receita se manteve est√°vel, acima de R$ 1 milh√£o por m√™s, mostrando um desempenho consistente, embora o crescimento tenha sido menos expressivo em compara√ß√£o a 2017.
        """)

    # Pergunta
    st.markdown(
        "##### 1.1 An√°lise de Flutua√ß√µes na Receita Mensal")

    # Verificando a contagem de registros por m√™s
    orders['InvoiceYearMonth'] = pd.to_datetime(
        orders['InvoiceYearMonth'], format='%Y%m')
    orders_count = orders.groupby(orders['InvoiceYearMonth'].dt.to_period(
        'M')).size().reset_index(name='Registros')

    # Renomeando as colunas para uma exibi√ß√£o mais clara
    orders_count.columns = ['InvoiceYearMonth', 'Registros']

    # Criando a tabela usando plotly
    fig_table = go.Figure(go.Table(
        header=dict(values=['InvoiceYearMonth', 'Registros']),
        cells=dict(values=[orders_count['InvoiceYearMonth'].astype(
            str), orders_count['Registros']])
    ))

    # Ajustando o layout para reduzir a margem
    fig_table.update_layout(
        margin=dict(l=10, r=10, t=10, b=10)
    )
    # Exibindo a tabela no Streamlit
    st.plotly_chart(fig_table, use_container_width=False)

    # Texto explicativo usando st.expander
    with st.expander("Detalhes da An√°lise"):
        st.markdown("""A varia√ß√£o na receita no final de 2016 e 2018 foi analisada para entender se era causada por flutua√ß√µes reais ou pela falta de dados. Identificou-se que, nesses per√≠odos, especialmente a partir de agosto de 2018, houve aus√™ncia de registros completos, explicando a discrep√¢ncia na receita.
                    """)

    # Pergunta
    st.markdown(
        "#### 2. Taxa de Crescimento Mensal (MoM)")

    # usando a fun√ß√£o pct_change() para ver a varia√ß√£o percentual mensal
    orders_revenue['MonthlyGrowth'] = orders_revenue['Revenue'].pct_change()

    '''
        A fun√ß√£o pct_change() no Pandas calcula a varia√ß√£o percentual entre os valores consecutivos de uma coluna de um DataFrame. 
        Essencialmente, ela mostra quanto o valor atual mudou em rela√ß√£o ao valor anterior, como uma porcentagem.
        '''

    # Filtrando os dados para exibir apenas a partir de janeiro de 2017
    filtered_data = orders_revenue.query("InvoiceYearMonth > 201701")

    # Criando o gr√°fico de taxa de crescimento mensal
    plot_data = [
        go.Scatter(
            x=filtered_data['InvoiceYearMonth'],  # Eixo X: M√™s e Ano
            # Eixo Y: Taxa de Crescimento Mensal
            y=filtered_data['MonthlyGrowth'],
            mode='lines+markers'  # Exibe linhas com marcadores
        )
    ]

    plot_layout = go.Layout(
        xaxis={"type": "category"},  # Eixo X categ√≥rico
        title='Taxa de Crescimento Mensal', width=1000, height=500
    )

    # Criando a figura combinando os dados e o layout
    fig_402 = go.Figure(data=plot_data, layout=plot_layout)

    # Exibindo o gr√°fico no Streamlit
    st.plotly_chart(fig_402, use_container_width=True)

    # Texto explicativo usando st.expander
    with st.expander("Detalhes da An√°lise"):
        st.markdown("""
                    A an√°lise da Taxa de Crescimento Mensal (MoM), destacada no gr√°fico, evidencia flutua√ß√µes significativas no desempenho da empresa. Alguns destaques incluem:

                    - **Altas expressivas**: Fevereiro de 2017 apresentou um crescimento de **+83,7%**.
                    - **Quedas acentuadas**: Dezembro de 2017 registrou uma redu√ß√£o de **-31,9%**.

                    Esses padr√µes sugerem **sazonalidade** e poss√≠veis impactos de promo√ß√µes ou desafios operacionais. 

                    ##### Recomenda√ß√£o:
                    - Replicar estrat√©gias de sucesso utilizadas nos meses de maior crescimento.
                    - Ajustar campanhas e estoques para mitigar impactos em per√≠odos de baixa.
                    - Tomar decis√µes baseadas em dados para promover um crescimento mais consistente ao longo do tempo.
                    """)

     # Pergunta
    st.markdown(
        "#### 3. Clientes Ativos Mensais (MAU)")

    # criando um dataframe de clientes ativos mensais contando os Customer IDs √∫nicos
    orders_monthly_active = orders.groupby('InvoiceYearMonth')[
        'customer_unique_id'].nunique().reset_index()

    # Criando o gr√°fico de barras para clientes ativos mensais
    plot_data = [
        go.Bar(
            x=orders_monthly_active['InvoiceYearMonth'],  # Eixo X: Ano e M√™s
            # Eixo Y: Clientes √∫nicos ativos
            y=orders_monthly_active['customer_unique_id'],
        )
    ]

    # Layout do gr√°fico
    plot_layout = go.Layout(
        xaxis={"type": "category"},  # Eixo X categ√≥rico
        title='Clientes Ativos Mensais',  # T√≠tulo do gr√°fico
        width=900,
        height=500
    )

    # Combinando os dados e o layout para criar a figura
    fig_403 = go.Figure(data=plot_data, layout=plot_layout)

    # Exibindo o gr√°fico no Streamlit
    st.plotly_chart(fig_403)

    # Texto explicativo usando st.expander
    with st.expander("Detalhes da An√°lise"):
        st.markdown("""
                    Entre janeiro de 2017 e agosto de 2018, o n√∫mero de Clientes Ativos Mensais (MAU) cresceu 134%, saindo de 735 em janeiro de 2017 para 6.352 em agosto de 2018. O pico registrado em novembro de 2017 representou um aumento de 63% em rela√ß√£o √† m√©dia dos tr√™s meses anteriores, possivelmente influenciado pela Black Friday, conforme observado em an√°lises anteriores.

                    Ap√≥s o pico, houve uma queda de 25% em dezembro de 2017, seguida por um per√≠odo de estabiliza√ß√£o. Essa estabiliza√ß√£o destaca a necessidade de estrat√©gias para manter o engajamento ap√≥s eventos sazonais.

                    #### Recomenda√ß√£o
                    - Campanhas de fideliza√ß√£o para refor√ßar a lealdade do cliente.
                    - Incentivos regulares, como promo√ß√µes e ofertas, para estimular compras em per√≠odos de menor movimento.
                    """)

    # Pergunta
    st.markdown(
        "#### 4. Pedidos Mensais")

    # Criar um novo dataframe para o n√∫mero de pedidos utilizando o campo 'quantidade'
    orders_monthly_sales = orders.groupby('InvoiceYearMonth')[
        'order_item_id'].sum().reset_index()

    # Plotando o gr√°fico
    plot_data = [
        go.Bar(
            # Eixo X: m√™s e ano da fatura
            x=orders_monthly_sales['InvoiceYearMonth'],
            # Eixo Y: n√∫mero total de itens do pedido
            y=orders_monthly_sales['order_item_id'],
        )
    ]

    plot_layout = go.Layout(
        xaxis={"type": "category"},  # Tipo do eixo X definido como categoria
        title='N√∫mero Total de Pedidos por M√™s',  # T√≠tulo do gr√°fico
        width=900,  # Largura do gr√°fico
        height=500  # Altura do gr√°fico
    )

    # Cria a figura com os dados e o layout do gr√°fico
    fig_404 = go.Figure(data=plot_data, layout=plot_layout)

    # Exibindo o gr√°fico no Streamlit
    st.plotly_chart(fig_404)

    # Texto explicativo usando st.expander
    with st.expander("Detalhes da An√°lise"):
        st.markdown("""
                    A an√°lise dos pedidos mostra um crescimento constante, com picos em novembro e dezembro, provavelmente devido √† Black Friday. A Olist pode explorar esses per√≠odos com campanhas promocionais direcionadas.

                    No entanto, a partir de junho de 2018, houve um decl√≠nio no n√∫mero de pedidos, o que indica menor engajamento. Para revitalizar o interesse e manter o engajamento dos clientes, a empresa pode investir em ofertas especiais, lan√ßamento de novos produtos ou campanhas de fideliza√ß√£o.
                    """)

    # Pergunta
    st.markdown(
        "#### 5. Varia√ß√£o de Clientes Novos e Existentes por M√™s")

    # Cria um DataFrame contendo o ID do cliente e a data da primeira compra
    orders_min_purchase = orders.groupby(
        'customer_unique_id').order_purchase_timestamp.min().reset_index()
    orders_min_purchase.columns = ['customer_unique_id', 'MinPurchaseDate']
    orders_min_purchase['MinPurchaseYearMonth'] = orders_min_purchase['MinPurchaseDate'].map(
        lambda date: 100*date.year + date.month)

    # Mescla a coluna da primeira data de compra com nosso DataFrame principal
    orders = pd.merge(orders, orders_min_purchase, on='customer_unique_id')

    orders['order_purchase_timestamp'] = pd.to_datetime(
        orders['order_purchase_timestamp'])

    orders['InvoiceYearMonth'] = orders['order_purchase_timestamp'].dt.to_period(
        'M')

    # Vamos usar a coluna 'MinPurchaseDate' e garantir que seja a primeira compra de cada cliente
    orders_min_purchase = orders.groupby('customer_unique_id')[
        'MinPurchaseDate'].min().reset_index()
    orders_min_purchase.columns = ['customer_unique_id', 'FirstPurchaseDate']

    orders_min_purchase['FirstPurchaseYearMonth'] = orders_min_purchase['FirstPurchaseDate'].dt.to_period(
        'M')

    orders = pd.merge(orders, orders_min_purchase[[
                      'customer_unique_id', 'FirstPurchaseYearMonth']], on='customer_unique_id', how='left')

    # Inicialmente, marcamos todos como 'Existing'
    orders['UserType'] = 'Existing'
    orders.loc[orders['InvoiceYearMonth'] ==
               orders['FirstPurchaseYearMonth'], 'UserType'] = 'New'

    # Passo 1: Converter 'InvoiceYearMonth' para string
    orders['InvoiceYearMonth'] = orders['InvoiceYearMonth'].astype(str)

    # Passo 2: Agrupar os dados por m√™s e tipo de cliente (New ou Existing)
    customer_counts = orders.groupby(['InvoiceYearMonth', 'UserType'])[
        'customer_unique_id'].nunique().reset_index()

    # Passo 3: Criar o gr√°fico com Plotly
    fig = px.line(customer_counts,
                  x='InvoiceYearMonth',
                  y='customer_unique_id',
                  color='UserType',
                  title='Varia√ß√£o de Clientes Novos e Existentes ao Longo do Tempo',
                  labels={'InvoiceYearMonth': 'M√™s da Compra',
                          'customer_unique_id': 'N√∫mero de Clientes'},
                  markers=True)

    # Passo 4: Exibir o gr√°fico no Streamlit
    st.plotly_chart(fig)

    # Texto explicativo usando st.expander
    with st.expander("Detalhes da An√°lise"):
        st.markdown("""
                    A an√°lise mostra que, embora a empresa esteja atraindo um grande n√∫mero de clientes novos, a convers√£o desses clientes em recorrentes √© limitada. Isso pode indicar uma alta taxa de churn (desist√™ncia), o que √© preocupante, pois o custo de adquirir novos clientes √© geralmente mais alto do que reter os existentes. Esse padr√£o sugere que a experi√™ncia p√≥s-compra pode n√£o ser otimizada ou que n√£o h√° iniciativas suficientes de fideliza√ß√£o para garantir que os clientes retornem.

                    #### Recomenda√ß√£o 
                    - Implementar programas de fidelidade que incentivem a recompra e aumentem o engajamento com os clientes existentes. 
                    - Analisar os padr√µes de churn e ajustar as estrat√©gias de marketing e de atendimento, garantindo que a experi√™ncia do cliente seja positiva ap√≥s a compra. 
                    - Monitorar a reten√ß√£o de clientes ao longo do tempo tamb√©m √© essencial para maximizar o valor de longo prazo dos clientes (LTV).
                    """)
